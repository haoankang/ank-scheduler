/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ank.hao.scheduler.controller.api;

import ank.hao.scheduler.controller.model.PageInfoTaskHistoryVO;
import ank.hao.scheduler.controller.model.VoidResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-11T14:07:43.697+08:00")

@Api(value = "jobRun", description = "the jobRun API")
public interface JobRunApi {

    Logger log = LoggerFactory.getLogger(JobRunApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "作业运行历史列表", nickname = "jobRunList", notes = "", response = PageInfoTaskHistoryVO.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job-run", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = PageInfoTaskHistoryVO.class) })
    @RequestMapping(value = "/jobRun/list/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PageInfoTaskHistoryVO> jobRunList(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId,@ApiParam(value = "", defaultValue = "1") @Valid @RequestParam(value = "pageNo", required = false, defaultValue="1") Integer pageNo,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"total\" : 0,  \"pages\" : 5,  \"size\" : 5,  \"data\" : {    \"names\" : [ \"names\", \"names\" ],    \"displayNames\" : [ \"displayNames\", \"displayNames\" ],    \"voList\" : [ {      \"jobName\" : \"jobName\",      \"runStartTime\" : 3,      \"runEndTime\" : 2,      \"historyId\" : \"historyId\",      \"planId\" : \"planId\",      \"jobRunId\" : 2,      \"runState\" : 9,      \"projectId\" : \"projectId\",      \"version\" : \"version\",      \"jobVersion\" : \"jobVersion\",      \"executeTime\" : 7    }, {      \"jobName\" : \"jobName\",      \"runStartTime\" : 3,      \"runEndTime\" : 2,      \"historyId\" : \"historyId\",      \"planId\" : \"planId\",      \"jobRunId\" : 2,      \"runState\" : 9,      \"projectId\" : \"projectId\",      \"version\" : \"version\",      \"jobVersion\" : \"jobVersion\",      \"executeTime\" : 7    } ]  },  \"pageSize\" : 1,  \"pageNum\" : 6}", PageInfoTaskHistoryVO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobRunApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "停止正在运行的作业", nickname = "jobRunStop", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job-run", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/jobRun/stop/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> jobRunStop(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobRunApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
