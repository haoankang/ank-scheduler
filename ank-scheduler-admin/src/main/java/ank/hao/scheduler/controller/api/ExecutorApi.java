/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ank.hao.scheduler.controller.api;

import ank.hao.scheduler.controller.model.DefaultResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-11T14:07:43.697+08:00")

@Api(value = "executor", description = "the executor API")
public interface ExecutorApi {

    Logger log = LoggerFactory.getLogger(ExecutorApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "执行器端回调运行结果", nickname = "executorCallback", notes = "", response = String.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "executor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = String.class) })
    @RequestMapping(value = "/executor/callback",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<String> executorCallback(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Object returnT) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", String.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExecutorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "执行器列表", nickname = "executorList", notes = "", response = Object.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "executor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Object.class) })
    @RequestMapping(value = "/executor/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Object> executorList() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"{}\"", Object.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExecutorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "注册执行器", nickname = "registryExecutor", notes = "", response = DefaultResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "executor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = DefaultResponse.class) })
    @RequestMapping(value = "/executor/registry",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<DefaultResponse> registryExecutor(@ApiParam(value = "" ,required=true )  @Valid @RequestBody String body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"result\" : \"result\",  \"message\" : \"{}\"}", DefaultResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExecutorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "注册服务", nickname = "registryService", notes = "", response = DefaultResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "executor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = DefaultResponse.class) })
    @RequestMapping(value = "/executor/registryService",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<DefaultResponse> registryService(@ApiParam(value = "" ,required=true )  @Valid @RequestBody String registryServiceParam) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"result\" : \"result\",  \"message\" : \"{}\"}", DefaultResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExecutorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "执行器端心跳监测", nickname = "schedulerHeartBeat", notes = "", authorizations = {
        @Authorization(value = "token")
    }, tags={ "executor", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success") })
    @RequestMapping(value = "/executor/heartbeat",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> schedulerHeartBeat() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ExecutorApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
