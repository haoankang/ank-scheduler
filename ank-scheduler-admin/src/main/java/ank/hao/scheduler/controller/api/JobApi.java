/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ank.hao.scheduler.controller.api;

import ank.hao.scheduler.controller.model.JobAddVO;
import ank.hao.scheduler.controller.model.JobDetailVO;
import ank.hao.scheduler.controller.model.JobUpdateVO;
import ank.hao.scheduler.controller.model.JobVersionVOList;
import ank.hao.scheduler.controller.model.TableData;
import ank.hao.scheduler.controller.model.VoidResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-07-11T14:07:43.697+08:00")

@Api(value = "job", description = "the job API")
public interface JobApi {

    Logger log = LoggerFactory.getLogger(JobApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "上线", nickname = "activeJob", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/job/online/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> activeJob(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "下线", nickname = "cancelJob", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/job/offline/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> cancelJob(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "新增作业", nickname = "jobAdd", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/job/add",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> jobAdd(@ApiParam(value = "" ,required=true )  @Valid @RequestBody JobAddVO body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "删除作业", nickname = "jobDelete", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/job/delete",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> jobDelete(@ApiParam(value = ""  )  @Valid @RequestBody Object jobIds) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "作业列表", nickname = "jobList", notes = "", response = TableData.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = TableData.class) })
    @RequestMapping(value = "/job/list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TableData> jobList() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"names\" : [ \"names\", \"names\" ],  \"data\" : [ {    \"jobName\" : \"jobName\",    \"jobId\" : 0,    \"updateTime\" : \"updateTime\",    \"comment\" : \"comment\",    \"state\" : 1,    \"indateRange\" : \"indateRange\",    \"runState\" : 6,    \"updateOper\" : \"0\"  }, {    \"jobName\" : \"jobName\",    \"jobId\" : 0,    \"updateTime\" : \"updateTime\",    \"comment\" : \"comment\",    \"state\" : 1,    \"indateRange\" : \"indateRange\",    \"runState\" : 6,    \"updateOper\" : \"0\"  } ],  \"displayNames\" : [ \"displayNames\", \"displayNames\" ]}", TableData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "查询作业信息", nickname = "jobQueryById", notes = "", response = JobDetailVO.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = JobDetailVO.class) })
    @RequestMapping(value = "/job/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<JobDetailVO> jobQueryById(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"jobName\" : \"jobName\",  \"cronExpression\" : \"cronExpression\",  \"cronJson\" : \"cronJson\",  \"jobId\" : 0,  \"conditionInfo\" : {    \"indateEndTime\" : 5,    \"indateStartTime\" : 1  },  \"dependFormer\" : false,  \"runImmediately\" : false,  \"comment\" : \"comment\",  \"jobBaseInfo\" : \"\",  \"timeout\" : 6.027456183070403}", JobDetailVO.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "回滚调度作业版本", nickname = "jobRollback", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/job/rollback/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> jobRollback(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "修改作业", nickname = "jobUpdate", notes = "", response = VoidResponse.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = VoidResponse.class) })
    @RequestMapping(value = "/job/update",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<VoidResponse> jobUpdate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody JobUpdateVO jobUpdateVO) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"data\" : \"{}\"}", VoidResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "作业版本列表", nickname = "queryJobVersionList", notes = "", response = JobVersionVOList.class, authorizations = {
        @Authorization(value = "token")
    }, tags={ "job", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = JobVersionVOList.class) })
    @RequestMapping(value = "/job/version/list/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<JobVersionVOList> queryJobVersionList(@ApiParam(value = "",required=true) @PathVariable("jobId") Integer jobId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"names\" : [ \"names\", \"names\" ],  \"data\" : [ {    \"jobId\" : 0,    \"updateTime\" : \"updateTime\",    \"comment\" : \"comment\",    \"updateContent\" : \"updateContent\",    \"updateOper\" : \"updateOper\",    \"jobVersion\" : \"jobVersion\"  }, {    \"jobId\" : 0,    \"updateTime\" : \"updateTime\",    \"comment\" : \"comment\",    \"updateContent\" : \"updateContent\",    \"updateOper\" : \"updateOper\",    \"jobVersion\" : \"jobVersion\"  } ],  \"displayNames\" : [ \"displayNames\", \"displayNames\" ]}", JobVersionVOList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default JobApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
